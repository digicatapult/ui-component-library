name: Build and Tests

on:
  push:
    branches: ['main']

jobs:
  preconditions:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo_ids.outputs.REPO_NAME }}
      org_name: ${{ steps.repo_ids.outputs.ORG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check npmjs token
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}"]; then
            echo "Must provide a NPM_TOKEN secret in order to run release workflow"
            exit 1
          fi

  lint:
    name: Run lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: 16.x
      - name: Cache Node.js modules
        uses: actions/cache@v1
        with:
          path: ~/.yarn # yarn cache files are stored in `~/.yarn` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: yarn
      - name: Build
        run: yarn build
      - name: Lint
        run: yarn run lint
  dependency-check:
    name: Run dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: 16.x
      - name: Cache Node.js modules
        uses: actions/cache@v1
        with:
          path: ~/.yarn # yarn cache files are stored in `~/.yarn` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: yarn
      - name: Dependency Check
        run: yarn run depcheck
  check-version:
    name: 'Check version'
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.get_version.outputs.IS_NEW_VERSION }}
      version: ${{ steps.get_version.outputs.VERSION }}
      build_date: ${{ steps.get_version.outputs.BUILD_DATE }}
      is_prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}

    steps:
      - uses: actions/checkout@v3
      - run: git fetch --depth=1 --tags origin
      - name: Install yq
        run: sudo snap install yq
      - name: Check Build Version
        id: get_version
        run: ./scripts/check-version.sh
        shell: bash
      - name: Skipping release as version has not increased
        if: steps.get_version.outputs.IS_NEW_VERSION != 'true'
        shell: bash
        run: |
          echo "Skipping release as current version has already been published"
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: 16.x
      - name: Cache Node.js modules
        uses: actions/cache@v1
        with:
          path: ~/.yarn # yarn cache files are stored in `~/.yarn` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install Packages
        run: yarn
      - name: Build
        run: yarn build
      - name: Test
        run: yarn test

  publish-npm:
    name: 'Publish package to NPMJS'
    needs:
      - preconditions
      - lint
      - dependency-check
      - test
      - check-version
    runs-on: ubuntu-latest
    if: ${{ needs.check-version.outputs.is_new_version == 'true' }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@digicatapult'
      - name: Publish to npmjs packages
        run: |
          cd packages/components
          npm ci
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
